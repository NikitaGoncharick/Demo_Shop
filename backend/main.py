from tempfile import template

import uvicorn
from starlette.responses import HTMLResponse, JSONResponse

from schemas import UserCreate, UserLogin
from crud import UserCRUD
from fastapi import FastAPI, Form
from fastapi.templating import Jinja2Templates
from fastapi.params import Depends
from fastapi import Request
from sqlalchemy.orm import Session
from sqlalchemy import text


from database import engine, get_db
from models import Base

# üöÄ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î
Base.metadata.create_all(bind=engine)
app = FastAPI()


template = Jinja2Templates(directory="../frontend/templates")

@app.get("/")
async def root(request: Request):
    return template.TemplateResponse("home.html", {"request": request})



# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.get("/register")
async def register_page(request: Request):
    return template.TemplateResponse("register.html", {"request": request})

@app.post("/register")
async def register_comand(request: Request, username: str = Form(...), email: str = Form(...), password: str = Form(...), db: Session = Depends(get_db)):
    try:
        userData = UserCreate(username=username, email=email, password=password)
    except Exception as e:
        return {"error": str(e)}

    new_user = UserCRUD.create_user(db, userData)

    if not new_user:
        print("User already exists")

    return JSONResponse({"User created successfully": "1111"})


# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.get("/login")
async def login_page(request: Request):
    return template.TemplateResponse("login.html", {"request": request})

@app.post("/login")
async def login_command(request: Request, email: str = Form(...), password: str = Form(...), db: Session = Depends(get_db) ):
    try:
        loginData = UserLogin(email=email, password=password)
    except Exception as e:
        return {"error": str(e)}

    user = UserCRUD.login_user(db, loginData)
    if not user:
        return {"error": "Invalid credentials"}

    return JSONResponse({"Login Success": "1111"})




#2. –†–∞–∑–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
# –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# def check_auth(request: Request):
#     # –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
#     return user
#
# # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
# def check_admin(user: User = Depends(check_auth)):
#     if not user.is_admin:
#         raise HTTPException(403, "Admin access required")
#     return user

#3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
# –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# @app.get("/shop/cart")
# async def user_cart(user: User = Depends(check_auth)):
#     return {"cart": user.cart}
#
# # –î–ª—è –∞–¥–º–∏–Ω–æ–≤
# @app.get("/admin/dashboard")
# async def admin_dashboard(admin: User = Depends(check_admin)):
#     return {"stats": "admin_data"}







if __name__ == "__main__":
    try:
        with engine.connect() as connection:
            result = connection.execute(text("SELECT version();"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            print("üß© –í–µ—Ä—Å–∏—è PostgreSQL:", result.scalar())
    except Exception as e:
        print(f"Error connecting to database: {e}")

    uvicorn.run(app, host="127.0.0.1", port=8000)